using System;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Text;

namespace fontconv
{
    public class Program
    {
        public static unsafe void Main(string[] args)
        {
            const int tileDivision = 16; // bitmap is divided into 16 rows of 16 tiles

            var bitmap = new Bitmap("font.png");
            var width = bitmap.Size.Width;
            var height = bitmap.Size.Height;

            if (width % tileDivision != 0 || height % tileDivision != 0)
            {
                Console.WriteLine("Width and height must be a multiple of {0}.", tileDivision);
                return;
            }

            var octalMap = new string[256];
            for (var i = 0; i < octalMap.Length; i++)
            {
                octalMap[i] = Convert.ToString(i, 8);
            }

            var output = new StringBuilder();
            
            var charWidth = width / tileDivision;
            var charHeight = height / tileDivision;

            output.AppendLine($"/* font image data generated by fontconv */");
            output.AppendLine();
            output.AppendLine($"static const struct {{");
            output.AppendLine($"    size_t  charWidth;");
            output.AppendLine($"    size_t  charHeight;");
            output.AppendLine($"    uint8_t data[{charWidth} * {charHeight} * 256 * 4 + 1];");
            output.AppendLine($"}} terminal_font = {{");
            output.AppendLine($"    {charWidth}, {charHeight},");

            var data = bitmap.LockBits(new Rectangle(0, 0, width, height), ImageLockMode.ReadOnly, PixelFormat.Format32bppArgb);
            try
            {
                var pixels = (byte*)data.Scan0;
                var stride = data.Stride / 4;

                // loop over tiles
                for (var tileY = 0; tileY < tileDivision; tileY++)
                {
                    for (var tileX = 0; tileX < tileDivision; tileX++)
                    {
                        var charX = tileX * charWidth;
                        var charY = tileY * charHeight;

                        output.Append("    \"");

                        // loop over pixels in tile
                        for (var y = 0; y < charHeight; y++)
                        {
                            for (var x = 0; x < charWidth; x++)
                            {
                                var pixel = &pixels[((charY + y) * stride + (charX + x)) * 4];
                                output.Append('\\');
                                output.Append(octalMap[*pixel++]);
                                output.Append('\\');
                                output.Append(octalMap[*pixel++]);
                                output.Append('\\');
                                output.Append(octalMap[*pixel++]);
                                output.Append('\\');
                                output.Append(octalMap[*pixel]);
                            }
                        }

                        output.AppendLine("\"");
                    }
                }
            }
            finally
            {
                bitmap.UnlockBits(data);
            }

            output.AppendLine("};");
            output.AppendLine();

            File.WriteAllText("terminal_font.h", output.ToString(), Encoding.ASCII);
        }
    }
}
